// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique
  email         String?
  username      String?
  displayName   String?
  bio           String?
  avatar        String?
  isHost        Boolean  @default(false)
  isVerified    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // Relations
  properties    Property[]
  bookings      Booking[]
  reviews       Review[] @relation("UserReviews")
  reviewsGiven  Review[] @relation("ReviewsGiven")
  messages      Message[]
  
  @@map("users")
}

model Property {
  id              String   @id @default(cuid())
  tokenId         Int      @unique // NFT token ID from blockchain
  title           String
  description     String
  location        String
  latitude        Float?
  longitude       Float?
  pricePerNight   Float
  maxGuests       Int
  bedrooms        Int
  bathrooms       Int
  propertyType    String
  amenities       Json
  images          Json     // Array of IPFS hashes
  rules           String?
  checkInTime     String?
  checkOutTime    String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Owner info (from blockchain)
  ownerAddress    String
  owner           User     @relation(fields: [ownerAddress], references: [walletAddress])
  
  // Relations
  bookings        Booking[]
  reviews         Review[]
  
  @@map("properties")
}

model Booking {
  id              String        @id @default(cuid())
  blockchainId    Int?         // Booking ID from smart contract
  propertyId      String
  guestAddress    String
  hostAddress     String
  checkInDate     DateTime
  checkOutDate    DateTime
  totalPrice      Float
  platformFee     Float
  status          BookingStatus @default(PENDING)
  guestMessage    String?
  transactionHash String?      // Blockchain transaction hash
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relations
  property        Property     @relation(fields: [propertyId], references: [id])
  guest           User         @relation(fields: [guestAddress], references: [walletAddress])
  reviews         Review[]
  messages        Message[]
  
  @@map("bookings")
}

model Review {
  id              String   @id @default(cuid())
  blockchainId    Int?     // Review ID from smart contract
  bookingId       String
  reviewerAddress String
  revieweeAddress String
  propertyId      String?
  rating          Int      // 1-5 stars
  comment         String
  isGuestReview   Boolean  // true if guest reviewing host
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  booking         Booking  @relation(fields: [bookingId], references: [id])
  reviewer        User     @relation("ReviewsGiven", fields: [reviewerAddress], references: [walletAddress])
  reviewee        User     @relation("UserReviews", fields: [revieweeAddress], references: [walletAddress])
  property        Property? @relation(fields: [propertyId], references: [id])
  
  @@map("reviews")
}

model Message {
  id              String   @id @default(cuid())
  bookingId       String
  senderAddress   String
  content         String
  isFromHost      Boolean
  readAt          DateTime?
  createdAt       DateTime @default(now())
  
  // Relations
  booking         Booking  @relation(fields: [bookingId], references: [id])
  sender          User     @relation(fields: [senderAddress], references: [walletAddress])
  
  @@map("messages")
}

model SearchIndex {
  id          String   @id @default(cuid())
  propertyId  String   @unique
  searchText  String   // Full-text search content
  location    String
  priceRange  String
  amenities   Json
  updatedAt   DateTime @updatedAt
  
  @@map("search_index")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  DISPUTED
}

// Add indexes for better query performance
// These will be added via raw SQL or Prisma migrations
