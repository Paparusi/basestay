// Clean Prisma schema for BaseStay - Real Production Database
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Property {
  id              String   @id @default(cuid())
  title           String
  description     String
  location        String
  latitude        Float?
  longitude       Float?
  pricePerNight   Float
  maxGuests       Int
  bedrooms        Int
  bathrooms       Int
  propertyType    String   @default("apartment")
  amenities       Json     @default("[]")
  images          Json     @default("[]")
  status          String   @default("active") // active, inactive, pending
  owner           String   // Wallet address
  
  // Metrics - calculated fields
  totalBookings   Int      @default(0)
  totalEarnings   Float    @default(0)
  averageRating   Float    @default(0)
  reviewCount     Int      @default(0)
  totalViews      Int      @default(0)
  
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  bookings        Booking[]
  reviews         Review[]
  earnings        Earnings[]
  
  @@map("properties")
}

model Booking {
  id              String   @id @default(cuid())
  propertyId      String   @map("property_id")
  guestAddress    String   @map("guest_address")
  guestName       String?  @map("guest_name")
  checkIn         DateTime @map("check_in")
  checkOut        DateTime @map("check_out")
  totalPrice      Float    @map("total_price")
  guests          Int
  status          String   @default("pending") // pending, confirmed, active, completed, cancelled
  notes           String?
  transactionHash String?  @map("transaction_hash") // USDC payment hash
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  
  // Relations
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  reviews         Review[]
  earnings        Earnings[]
  
  @@map("bookings")
}

model Review {
  id              String   @id @default(cuid())
  bookingId       String   @map("booking_id")
  propertyId      String   @map("property_id")
  reviewerAddress String   @map("reviewer_address")
  reviewerName    String?  @map("reviewer_name")
  rating          Int      // 1-5 stars
  comment         String?
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("reviews")
}

model Earnings {
  id              String   @id @default(cuid())
  hostAddress     String   @map("host_address")
  bookingId       String   @map("booking_id")
  propertyId      String   @map("property_id") 
  amount          Float    // Total booking amount
  platformFee     Float    @map("platform_fee") // 5% fee (amount * 0.05)
  netAmount       Float    @map("net_amount")   // Amount after fee (amount * 0.95)
  status          String   @default("pending") // pending, completed, paid
  transactionHash String?  @map("transaction_hash") // USDC transfer hash
  createdAt       DateTime @default(now()) @map("created_at")
  
  // Relations
  booking         Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  property        Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  @@map("earnings")
}
