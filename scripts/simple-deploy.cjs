require('dotenv').config({ path: '.env.local' });
const { ethers } = require('ethers');
const fs = require('fs');
const path = require('path');

// BST Token bytecode (đã được compile từ contracts/BST.sol)
const BST_BYTECODE = "";

// Simplified ABI với chỉ các function cần thiết
const BST_ABI = [
    "constructor()",
    "function name() view returns (string)",
    "function symbol() view returns (string)",
    "function totalSupply() view returns (uint256)",
    "function balanceOf(address) view returns (uint256)",
    "function decimals() view returns (uint8)",
    "function owner() view returns (address)",
    "event Transfer(address indexed from, address indexed to, uint256 value)"
];

async function deployBSTToken() {
    try {
        console.log('🚀 Deploying BST Token to Base Mainnet...');
        console.log('==========================================');
        
        // Initialize provider and wallet
        const provider = new ethers.providers.JsonRpcProvider('https://mainnet.base.org');
        const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);
        
        console.log(`💼 Deployer: ${wallet.address}`);
        
        // Check balance
        const balance = await wallet.getBalance();
        console.log(`💰 Balance: ${ethers.utils.formatEther(balance)} ETH`);
        
        if (balance.lt(ethers.utils.parseEther('0.005'))) {
            console.log('❌ Insufficient balance for deployment');
            return;
        }
        
        // Create contract factory
        const contractFactory = new ethers.ContractFactory(BST_ABI, BST_BYTECODE, wallet);
        
        // Estimate gas
        const deployTx = contractFactory.getDeployTransaction();
        const gasEstimate = await provider.estimateGas(deployTx);
        console.log(`⛽ Gas estimate: ${gasEstimate.toString()}`);
        
        // Get gas price
        const gasPrice = await provider.getGasPrice();
        const cost = gasPrice.mul(gasEstimate);
        console.log(`💸 Estimated cost: ${ethers.utils.formatEther(cost)} ETH`);
        
        console.log('');
        console.log('🚀 Deploying contract...');
        console.log('⏳ Please wait...');
        
        // Deploy contract
        const contract = await contractFactory.deploy({
            gasLimit: gasEstimate.mul(120).div(100), // 20% buffer
            gasPrice: gasPrice.mul(110).div(100) // 10% higher gas price
        });
        
        console.log(`📦 TX Hash: ${contract.deployTransaction.hash}`);
        console.log('⏳ Waiting for confirmation...');
        
        // Wait for deployment
        await contract.deployTransaction.wait();
        
        console.log('');
        console.log('🎉 BST TOKEN DEPLOYED SUCCESSFULLY!');
        console.log('==================================');
        console.log(`📍 Contract Address: ${contract.address}`);
        console.log(`🔍 BaseScan: https://basescan.org/address/${contract.address}`);
        
        // Update .env.local
        const envPath = path.join(__dirname, '../.env.local');
        let envContent = fs.readFileSync(envPath, 'utf8');
        
        if (envContent.includes('NEXT_PUBLIC_BST_TOKEN_ADDRESS=')) {
            envContent = envContent.replace(
                /NEXT_PUBLIC_BST_TOKEN_ADDRESS=.*/g, 
                `NEXT_PUBLIC_BST_TOKEN_ADDRESS=${contract.address}`
            );
        } else {
            envContent += `\nNEXT_PUBLIC_BST_TOKEN_ADDRESS=${contract.address}`;
        }
        
        fs.writeFileSync(envPath, envContent);
        console.log('✅ Address saved to .env.local');
        
        // Test contract
        console.log('');
        console.log('🧪 Testing contract...');
        const totalSupply = await contract.totalSupply();
        const name = await contract.name();
        const symbol = await contract.symbol();
        const decimals = await contract.decimals();
        const owner = await contract.owner();
        const ownerBalance = await contract.balanceOf(wallet.address);
        
        console.log(`📊 Token: ${name} (${symbol})`);
        console.log(`🔢 Decimals: ${decimals}`);
        console.log(`💎 Total Supply: ${ethers.utils.formatEther(totalSupply)} BST`);
        console.log(`👑 Owner: ${owner}`);
        console.log(`💰 Owner Balance: ${ethers.utils.formatEther(ownerBalance)} BST`);
        
        console.log('');
        console.log('🎯 NEXT STEPS:');
        console.log('==============');
        console.log('1. 🔄 Restart development server');
        console.log('2. 🌐 Test BST features on frontend');
        console.log('3. 🚀 Deploy to production');
        console.log('4. 📈 Announce BST launch');
        
        return contract.address;
        
    } catch (error) {
        console.error('❌ Deployment failed:', error.message);
        if (error.transaction) {
            console.error('💔 TX Hash:', error.transaction.hash);
        }
        throw error;
    }
}

deployBSTToken().catch(console.error);
